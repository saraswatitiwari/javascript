Loops
Loops let you run a block of code a certain number of times.

Loops
// logs ’try 0 ’ , ’try 1 ’ , ... , ’try 4 ’
for ( var i =0; i <5; i ++) {
     console . log ( ’ try ’ + i);
}

Note that in Loops even though we use the keyword var before the variable name i, this does not “scope” the variable
i to the loop block.

The	for	loop
A for loop is made up of four statements and has the following structure:

for ([ initialisation ]; [ conditional ]; [ iteration ])
  [ loopBody ]

A typical for loop

for ( var i = 0 , limit = 100; i < limit ; i ++) {
    // This block will be executed 100 times
    console . log ( ’ Currently at ’ + i);
    // Note : the last log will be ” Currently at 99”
}

The	while	loop
A while loop is similar to an if statement, except that its body will keep executing until the condition
evaluates to false.

while ([ conditional ]) [ loopBody ]

A typical while loop

var i = 0;
while (i < 100) {

      // This block will be executed 100 times
      console . log ( ’ Currently at ’ + i);

      i ++; // increment i

}

A while loop with a combined conditional and incrementer

var i = -1;
while (++ i < 100) {
      // This block will be executed 100 times
      console . log ( ’ Currently at ’ + i);
}

Notice that we’re starting at -1 and using the prefix incrementer (++i).

The	do-while loop
This is almost exactly the same as the while loop, except for the fact that the loop’s body is executed at
least once before the condition is tested.

do [ loopBody ] while ([ conditional ])

A do-while loop
do {

      // Even though the condition evaluates to false
      // this loop ’s body will still execute once .

      alert ( ’Hi there ! ’);

} while ( false );

Breaking	and	continuing
Usually, a loop’s termination will result from the conditional statement not evaluating to true, but it is
possible to stop a loop in its tracks from within the loop’s body with the break statement.

Stopping a loop
for ( var i = 0; i < 10; i ++) {
    if ( something ) {
         break ;
    }
}

You may also want to continue the loop without executing more of the loop’s body. This is done using
the continue statement.

Skipping to the next iteration of a loop
for ( var i = 0; i < 10; i ++) {

      if ( something ) {
          continue ;
      }

      // The following statement will only be executed
      // if the conditional ’something ’ has not been met
      console . log ( ’I have been reached ’);
}