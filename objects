Objects
Objects contain one or more key-value pairs. The key portion can be any string. The value portion can
be any type of value: a number, a string, an array, a function, or even another object.

Creating an “object literal”
var myObject = {
    sayHello : function () {
        console . log ( ’hello ’);
    } ,
    myName : ’Rebecca ’
};
myObject . sayHello ();               // logs ’hello ’
console . log ( myObject . myName ); // logs ’Rebecca ’

Note
var myObject = {
    validIdentifier : 123 ,
    ’some string ’: 456 ,
    99999: 789
};


Functions
Functions contain blocks of code that need to be executed repeatedly. Functions can take zero or more
arguments, and can optionally return a value.
Functions can be created in a variety of ways:

Function Declaration
function foo () { /* do something */ }

Named Function Expression
var foo = function () { /* do something */ }

I prefer the named function expression method of setting a function’s name, for some rather in-depth and technical
reasons. You are likely to see both methods used in others’ JavaScript code.

Using Functions
A simple function
var greet = function ( person , greeting ) {
    var text = greeting + ’, ’ + person ;
    console . log ( text );
};
greet ( ’ Rebecca ’ , ’Hello ’);

A function that returns a value
var greet = function ( person , greeting ) {
    var text = greeting + ’, ’ + person ;
    return text ;
};

console . log ( greet ( ’ Rebecca ’ , ’hello ’));

A function that returns another function
var greet = function ( person , greeting ) {
    var text = greeting + ’, ’ + person ;
    return function () { console . log ( text ); };
};

var greeting = greet ( ’ Rebecca ’ , ’Hello ’);
greeting ();

A self-executing anonymous function
( function (){
     var foo = ’Hello world ’;
})();

console . log ( foo ); // undefined !

Passing an anonymous function as an argument
var myFn = function (fn) {
    var result = fn ();
    console . log ( result );
};

myFn ( function () { return ’hello world ’; }); // logs ’hello world ’

Passing a named function as an argument
var myFn = function (fn) {
    var result = fn ();
    console . log ( result );
};

var myOtherFn = function () {
    return ’hello world ’;
};

myFn ( myOtherFn ); // logs ’hello world ’

Testing the type of various variables
var myFunction = function () {
    console . log ( ’hello ’);
};

var myObject = {
    foo : ’bar ’
};

var myArray = [ ’a’ , ’b’ , ’c’ ];
var myString = ’hello ’;

var myNumber = 3;

typeof myFunction ; // returns ’function ’
typeof myObject ; // returns ’object ’
typeof myArray ; // returns ’object ’ -- careful !
typeof myString ; // returns ’string ’;
typeof myNumber ; // returns ’number ’

typeof null ; // returns ’object ’ -- careful !

if ( myArray . push && myArray . slice && myArray . join ) {
// probably an array
// ( this is called ” duck typing ”)
}

if ( Object . prototype . toString . call ( myArray ) === ’[ object Array ] ’) {
// Definitely an array !
// This is widely considered as the most robust way
// to determine if a specific value is an Array .
}


A function invoked using Function.call
var myObject = {
    sayHello : function () {
        console . log ( ’Hi! My name is ’ + this . myName );
    } ,

    myName : ’Rebecca ’
};

var secondObject = {
    myName : ’Colin ’
};

myObject . sayHello ();                   // logs ’Hi! My name is Rebecca ’
myObject . sayHello . call ( secondObject ); // logs ’Hi! My name is Colin ’


A function created using Function.bind
var myName = ’the global object ’ ,

    sayHello = function () {
       console . log ( ’Hi! My name is ’ + this . myName );
    } ,

    myObject = {
       myName : ’Rebecca ’
    };

var myObjectHello = sayHello . bind ( myObject );

sayHello ();        // logs ’Hi! My name is the global object ’
myObjectHello ();   // logs ’Hi! My name is Rebecca ’


A function being attached to an object at runtime
var myName = ’the global object ’ ,

    sayHello = function () {
        console . log ( ’Hi! My name is ’ + this . myName );
    } ,

    myObject = {
        myName : ’Rebecca ’
    } ,

    secondObject = {
        myName : ’Colin ’
    };

myObject . sayHello = sayHello ;
secondObject . sayHello = sayHello ;

sayHello ();                 // logs ’Hi! My name is the global object ’
myObject . sayHello ();      // logs ’Hi! My name is Rebecca ’
secondObject . sayHello ();  // logs ’Hi! My name is Colin ’

Note
var myNamespace = {
    myObject : {
        sayHello : function () {
            console . log ( ’Hi! My name is ’ + this . myName );
        } ,

         myName : ’Rebecca ’
    }
};

var hello = myNamespace . myObject . sayHello ;

hello (); // logs ’Hi! My name is undefined ’

var myNamespace = {
    myObject : {
        sayHello : function () {
             console . log ( ’Hi! My name is ’ + this . myName );
        } ,

        myName : ’Rebecca ’
    }
};

var obj = myNamespace . myObject ;

obj . sayHello (); // logs ’Hi! My name is Rebecca ’


Functions have access to variables defined in the same scope
var foo = ’hello ’;

var sayHello = function () {
    console . log ( foo );
};

sayHello ();             // logs ’hello ’
console . log ( foo );   // also logs ’hello ’

Code outside the scope in which a variable was defined does not have access to the variable
var sayHello = function () {
var foo = ’hello ’;
console . log ( foo );
};
sayHello (); // logs ’hello ’
console . log ( foo ); // doesn ’t log anything
Variables with the same name can exist in different scopes with different values
var foo = ’world ’;
var sayHello = function () {
var foo = ’hello ’;
console . log ( foo );
};
sayHello (); // logs ’hello ’
console . log ( foo ); // logs ’world ’

Functions can “see” changes in variable values after the function is defined
var myFunction = function () {
    var foo = ’hello ’;

    var myFn = function () {
        console . log ( foo );
    };

    foo = ’world ’;

    return myFn ;
};

var f = myFunction ();
f (); // logs ’world ’ -- uh oh

Scope insanity
// a self - executing anonymous function
( function () {
      var baz = 1;
      var bim = function () { alert ( baz ); };
      bar = function () { alert ( baz ); };
})();

console . log ( baz ); // baz is not defined outside of the function

bar ();   // bar is defined outside of the anonymous function
          // because it wasn ’t declared with var ; furthermore ,
          // because it was defined in the same scope as baz ,
          // it has access to baz even though other code
          // outside of the function does not
bim ();   // bim is not defined outside of the anonymous function ,
          // so this will result in an error


Closures
How to lock in the value of i?
/* this won ’t behave as we want it to; */
/* every click will alert 5 */
for ( var i =0; i <5; i ++) {
    $( ’ <p> click me </p > ’). appendTo ( ’body ’). click ( function () {
          alert (i);
    });
}

Locking in the value of i with a closure
/* fix : ’close ’ the value of i inside
         createFunction , so it won ’t change */
var createFunction = function (i) {
    return function () { alert (i); };
};

for ( var i =0; i <5; i ++) {
    $( ’ <p> click me </p > ’). appendTo ( ’body ’). click ( createFunction (i ));
}

Using a closure to access inner and outer object instances simultaneously
var outerObj = {
    myName : ’outer ’ ,
    outerFunction : function () {

        // provide a reference to outerObj
        // through innerFunction ’s closure
        var self = this ;

        var innerObj = {
            myName : ’inner ’ ,
            innerFunction : function () {
                  // logs ’outer inner ’
                  console . log ( self . myName , this . myName );
            }
        };
 
        innerObj . innerFunction ();

        console . log ( this . myName ); // logs ’outer ’
    }
};

outerObj . outerFunction ();
